package org.pgist.wfengine.web;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.directwebremoting.WebContextFactory;
import org.pgist.wfengine.OpenWorkflow;
import org.pgist.wfengine.Workflow;
import org.pgist.wfengine.WorkflowEngine;
import org.pgist.wfengine.activity.SituationActivity;


/**
 * DWR Agent class for Workflow Management.
 * 
 * @author kenny
 */
public class WorkflowAgent {
    
    
    private WorkflowEngine engine;
    
    
    public void setEngine(WorkflowEngine engine) {
        this.engine = engine;
    }
    
    
    /*
     * ------------------------------------------------------------------------
     */
    
    
    /**
     * Get template list. In LitEngine, a template is actually an instance of SituationActivity.
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *         <li>
     *           html - string, html source segment generated by "/WEB-INF/jsp/workflow/wf_templates.jsp". In this page the following variables are avaiable:<br>
     *             <ul>
     *               <li>tempaltes - a list of SituationActivity objects</li>
     *             </ul>
     *         </li>
     *     </ul>
     */
    public Map getTemplates(HttpServletRequest request) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            /*
             * Get all the templates
             */
            Collection<SituationActivity> templates = engine.getTemplateSituations();
            
            request.setAttribute("templates", templates);
            
            results.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/workflow/wf_templates.jsp"));
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//getTemplates()
    
    
    /**
     * Create a workflow instance from the given template.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>situationId - int, id of a SituationActivity object</li>
     *         <li>name, string, name of this situation</li>
     *         <li>description, string, description of this situation</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *         <li>workflowId - int, id of the newly created Workflow object</li>
     *     </ul>
     */
    public Map createInstance(Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Long situationId = new Long((String) params.get("situationId"));
            
            String name = (String) params.get("name");
            String description = (String) params.get("description");
            if (name==null || description==null) {
                results.put("reason", "name or description is missing.");
            }
            
            Workflow workflow = engine.createWorkflow(situationId, name, description);
            
            results.put("workflowId", workflow.getId());
            results.put("successful", true);
        } catch (Exception e) {
            results.put("reason", e.getMessage());
            e.printStackTrace();
        }
        
        return results;
    }//createInstance()
    
    
    /**
     * Get situation list.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>type - string, type of workflows. ["running" | "all"]. Default is "all"</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *         <li>instanceTotal - total number of instances (runningWorkflows + finishedWorkflows)</li>
     *         <li>runningTotal - total number of running instances</li>
     *         <li>openRunningTotal - total number of running and open accessed instances</li>
     *         <li>openInstanceId - id of one open accessed instance, if there are many such instances, the id will be a random one.</li>
     *         <li>finishedTotal - total number of running instances</li>
     *         <li>instanceId - if runningTotal=1, this is the id of that instance</li>
     *         <li>
     *           html - string, html source segment generated by "/WEB-INF/jsp/workflow/wf_workflows.jsp". In this page the following variables are avaiable:<br>
     *             <ul>
     *               <li>runningWorkflows - a list of running Workflow objects</li>
     *               <li>finishedWorkflows - a list of finished Workflow objects</li>
     *               <li>newWorkflows - a list of new Workflow objects</li>
     *             </ul>
     *         </li>
     *     </ul>
     */
    public Map getWorkflows(HttpServletRequest request, Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Collection runningWorkflows = engine.getRunningWorkflows();
            request.setAttribute("runningWorkflows", runningWorkflows);
            results.put("runningTotal", runningWorkflows.size());
            int openRunningTotal = 0;
            long openInstanceId = -1;
            for (Workflow one : (Collection<Workflow>) runningWorkflows) {
                if (one.isOpenAccess()) {
                    openRunningTotal++;
                    openInstanceId = one.getId();
                }
            }
            results.put("openRunningTotal", openRunningTotal);
            results.put("openInstanceId", openInstanceId);
            request.setAttribute("openRunningTotal", openRunningTotal);
            request.setAttribute("openInstanceId", openInstanceId);
            
            Collection finishedWorkflows = engine.getFinishedWorkflows();
            request.setAttribute("finishedWorkflows", finishedWorkflows);
            results.put("instanceTotal", finishedWorkflows.size());
            request.setAttribute("instanceTotal", finishedWorkflows.size());
            
            if ("all".equalsIgnoreCase((String) params.get("type"))) {
                /*
                 * Get new workflows
                 */
                Collection newWorkflows = engine.getNewWorkflows();
                request.setAttribute("newWorkflows", newWorkflows);
            }
            
            int instanceTotal = runningWorkflows.size() + finishedWorkflows.size();
            results.put("instanceTotal", instanceTotal);
            
            if (runningWorkflows.size()==1) {
                Workflow workflow = (Workflow) runningWorkflows.iterator().next();
                results.put("instanceId", workflow.getId());
            }
            
            results.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/workflow/wf_workflows.jsp"));
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//getWorkflows()
    
    /**
     * JSONP implementation: Get situation list.
     * 
     */
    public Map getOpenWorkflows() {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Collection runningWorkflows = engine.getRunningWorkflows();
            List openWorkflows = new ArrayList();
            
            int openRunningTotal = 0;
            for (Workflow one : (Collection<Workflow>) runningWorkflows) {
                if (one.isOpenAccess()) {
                    openRunningTotal++;
                    OpenWorkflow ow = new OpenWorkflow(one.getName(), one.getId());
                    openWorkflows.add(ow);         
                }
            }
            results.put("openWorkflows", openWorkflows);
            results.put("openRunningTotal", openRunningTotal);
         
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//getWorkflows()
    
    
    /**
     * Start the given workflow instance.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>workflowId - int, id of a Workflow object</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *     </ul>
     */
    public Map startWorkflow(Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Long workflowId = new Long((String) params.get("workflowId"));
            
            engine.startWorkflow(workflowId);
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//startWorkflow()
    
    
    /**
     * Get the entry page for the given workflow instance.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>workflowId - int, id of a Workflow object</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *         <li>
     *           html - string, html source segment generated by "/WEB-INF/jsp/workflow/wf_workflow.jsp". In this page the following variables are avaiable:<br>
     *             <ul>
     *               <li>workflows - a list of Workflow objects</li>
     *             </ul>
     *         </li>
     *     </ul>
     */
    public Map getWorkflow(HttpServletRequest request, Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Long workflowId = new Long((String) params.get("workflowId"));
            
            Workflow workflow = engine.getWorkflowById(workflowId);
            
            request.setAttribute("workflow", workflow);
            
            results.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/workflow/wf_workflow.jsp"));
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//getWorkflow()
    
    
    /**
     * Execute the workflow to go over one specific activity.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>workflowId - int, id of a Workflow object</li>
     *         <li>contextId - int, id of a RunningContext object</li>
     *         <li>activityId - int, id of an Activity object</li>
     *         <li>nextId - int, id of an Activity object. (Required for some activities.)</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *     </ul>
     */
    public Map nextStep(Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Long workflowId = new Long((String) params.get("workflowId"));
            Long contextId = new Long((String) params.get("contextId"));
            Long activityId = new Long((String) params.get("activityId"));
            
            String nextIdStr = (String) params.get("nextId");
            if (nextIdStr==null || nextIdStr.length()==0) {
                engine.executeWorkflow(workflowId, contextId, activityId);
            } else {
                Long nextId = new Long((String) params.get("nextIdStr"));
                //engine.executeWorkflow(workflowId, contextId, activityId, nextId);
            }
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//nextStep()
    
    
    /**
     * Set the open access status for one workflow instance.
     * 
     * @param params A map contains:
     *     <ul>
     *         <li>workflowId - int, id of a Workflow object</li>
     *         <li>openAccess - string, "true" | "false"</li>
     *     </ul>
     * 
     * @return A map contains:
     *     <ul>
     *         <li>successful - boolean, whether the operation succeed</li>
     *         <li>reason - string, the reason why it fails</li>
     *     </ul>
     */
    public Map setOpenAccess(Map params) {
        Map results = new HashMap();
        results.put("successful", false);
        
        try {
            Long workflowId = new Long((String) params.get("workflowId"));
            
            engine.setOpenAccess(workflowId, "true".equalsIgnoreCase((String) params.get("openAccess")));
            
            results.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            results.put("reason", e.getMessage());
        }
        
        return results;
    }//nextStep()
        
}//class WorkflowAgent
